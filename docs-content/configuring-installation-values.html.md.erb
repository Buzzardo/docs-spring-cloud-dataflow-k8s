---
title: Configuring Installation Values for Spring Cloud Data Flow for Kubernetes
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes how to configure the Spring Cloud Data Flow for Kubernetes installation resources before deploying to the Kubernetes cluster.

Before proceeding, review the [Preparing to Install SCDF for Kubernetes](preparing-to-install-scdf-for-kubernetes.html) topic for details about:

* Preparing the Spring Cloud Data Flow for Kubernetes installation resources on your local workstation,
* Installing required command-line tools, and
* Preparing the Kubernetes cluster and application-image registry dependencies.

## <a id='overview'></a> Overview

There are a few concepts that drive how the configuration of Spring Cloud Data Flow for Kubernetes is performed.

* Support for multiple deployment environments
* Configuration of application properties
* Configuration of Kubernetes Resources
* Support for installation in an air-gapped environment

The following sections explain these concepts and the steps you need to take to configure them.


## <a id='support-for-multiple-environments'></a> Support for multiple deployment environments

The installation is based on the tool [Kustomize](https://kustomize.io) that allows you to customize Kubernetes resources by providing base resources files and patch files that modify the base resources to target different deployment environments.
Kustomize is built into the kubectl CLI.
The provided configuration files support a development and production environment.
The development environment is intended to quickly try Spring Cloud Data Flow for Kubernetes by provisioning a RabbitMQ message broker and Postresql database.


### <a id='directory-structure'></a> Directory Structure

The installation directory structure contains the following directories.

* `bin` - scripts for installing and installing to the development environment as well as a script for performing image relocation.
* `apps` - Kubernetes resource files and application configuration files to support deployment to multiple environments
* `services` - Kubernetes resources for deploying RabbitMQ and PostgreSQL fur use with the development environment

The apps directory contains the following folder structure based on Kustomize namving conventions

<pre>
.
├── apps
│   ├── data-flow
│   │   ├── images
│   │   ├── kustomize
│   │   │   ├── base
│   │   │   └── overlays
│   │   └── schemas
│   └── skipper
│       ├── images
│       ├── kustomize
│       │   ├── base
│       │   └── overlays
│       └── schemas
</pre>

There are two directories for each application that is part of Spring Cloud Data Flow for Kubernetes.
The first directory, data-flow, contains the Data Flow Server and the second directory contains the Skipper server.
Within each application directory there is the following directory structure

* `images` - location for container images that can be downloaded separately.
* `kustomize` - the directory containing Kubernetes and application configuration files for use with Kustomize.
* `schemas` - Database schemas that you can install manually if you do not want each server to install them upon startup.

The contents of the kustomize directory is shown below.
Edit files in this directory to configure the application and Kubernetes resources.

<pre>
.
├── base
│   ├── deployment.yaml
│   ├── kustomization.yaml
│   ├── role-binding.yaml
│   ├── roles.yaml
│   ├── service-account.yaml
│   └── service.yaml
└── overlays
    ├── dev
    │   ├── application.yaml
    │   ├── deployment-patch.yaml
    │   ├── kustomization.yaml
    │   └── service-patch.yaml
    └── production
        ├── application.yaml
        ├── deployment-patch.yaml
        ├── kustomization.yaml
        └── service-patch.yaml
</pre>

**Base**

The `base` directory contains kubernetes resource files with default configuration values that are then patched by files in the overlays directory.
The file `kustomization.yaml` references the other yaml files in that directory.

**Overlays**

There is a directory per deployment environment.
In this case `dev` and `production` environments.
In each directory there is a `kustomization.yaml` file that references the `kustomization.yaml` file in the base and adds additional patches to modify values unique to the target deployment environment.
You can also add additonal configuration in the `kustomization.yaml` to set the target namespace to deploy to add labels and name prefixes.  See the [kustomization documentation](https://github.com/kubernetes-sigs/kustomize/blob/master/docs/fields.md) for additional fields that can be configured in the kustomization.yaml file.


## <a id='configuration-steps'></a> Configuration Steps

The file `application.yaml` is a Spring Boot configuration file that you will edit to configure the Data Flow and Skipper server.
For example, you can configure `spring.datasource` properties or `spring.cloud.dataflow.features` properties.
The `deployment-patch.yaml` and `service-patch.yaml` files are where you will patch the base kubernetes resources with values appropriate for your target environment.
Examples of these fields are memory/cpu allocations and ingress configuration.


### <a id='database-configuration'></a> Database

You can customize the database configuration settings in the `application.yaml` and the `deployment-path.yaml` files.
These files are preconfigured to connect to a PostgreSQL database that can be installed either using the manifests provided in `services/dev/postgresql` or by installing the `bitnami/postgresql` Helm chart.

#### <a id='database-connection'></a> Database Connections Settings

To use a different database you would need to replace or remove the secret `volume` and `volumeMount` in the `deployment-patch.yaml` file.
If you replace the secret we recommned to provide `database-password` as the path for the password key since that simplifies the changes needed for the `application.yaml` file.

You need to change the database settings for both the `skipper` and `data-flow` apps.
Here is an example of using a secret named `production-db` with a `password` key (You can specify additional keys if they are available in the secret and refrence the path you specify in `application.yaml`):

```yaml
      containers:
      - name: skipper
        volumeMounts:
          - name: database
            mountPath: /etc/secrets/database
            readOnly: true
  ...

      volumes:
        - name: database
          secret:
            secretName: postgresql
            items:
            - key: postgresql-password
              path: database-password 

```

The settings in `application.yaml` that you need to consider are under `spring.datasource`, modify the `url`, `username`, `password` and `driverClassName` values to match you detabase settings:

```yaml
spring:

  ...

  datasource:
    url: jdbc:postgresql://database-host:5432/dataflow-db
    username: postgres
    password: ${database-password}
    driverClassName: org.postgresql.Driver
    testOnBorrow: true
    validationQuery: "SELECT 1"
```

#### <a id='database-connection'></a> Initializing Database Schema

You can initialize you database schema using the DDL scripts available under `apps/skipper/schemas` and `apps/data-flow/schemas`.
We provide DDL for DB2, MySQL, Oracle, PostgreSQL and MS SQL Server.
If there are multiple files they must be applied in the correct order starting with `V1-` followed by `V2-` and `V3-` etc.

If you initialize the schema for the database you can turn off the database initialization of the skipper and data-flow apps by adding the follwowing settings to the resective `application.yaml` files:

```yaml
spring:

  ...

  jpa:
    hibernate:
      ddlAuto: none
  flyway:
    enabled: false
```


#### <a id='database-connection'></a> Adding JDBC Driver

It is possibe to add your own JDBC driver if you do not want to use the JDBC drivers that are provided.
JDBC drivers for DB2, MySQL, Oracle, PostgreSQL and MS SQL Server are provided in the published app artifacts.

I order to add a JDBC driver you need to perform the following steps:

1. Download the server jars for data-flow and skipper

    ```bash
    wget https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-skipper-server/2.4.1.RELEASE/spring-cloud-skipper-server-2.4.1.RELEASE.jar
    wget https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dataflow-server/2.5.1.RELEASE/spring-cloud-dataflow-server-2.5.1.RELEASE.jar
    ```

1. Create a directory containing the JDBC driver to be added

    ```bash
    mkdir -p BOOT-INF/lib
    ```

1. Add the driver to the downloaded jars

    ```bash
    jar -u0f spring-cloud-skipper-server-2.4.1.RELEASE.jar BOOT-INF/lib/*.jar
    jar -u0f spring-cloud-dataflow-server-2.5.1.RELEASE.jar BOOT-INF/lib/*.jar
    ```

1. Create Dockerfiles for adding the updated server jars as new container images

    Create two docker files:

    _Dockerfile-skipper-server_
    ```bash
    FROM springcloud/openjdk:2.0.1.RELEASE
    COPY spring-cloud-skipper-server-2.4.1.RELEASE.jar /maven/spring-cloud-skipper-server.jar
    ENTRYPOINT ["java", "-jar","/maven/spring-cloud-skipper-server.jar"]
    ```

    _Dockerfile-dataflow-server_
    ```bash
    FROM springcloud/openjdk:2.0.1.RELEASE
    COPY spring-cloud-dataflow-server-2.5.1.RELEASE.jar /maven/spring-cloud-dataflow-server.jar
    ENTRYPOINT ["java", "-jar","/maven/spring-cloud-dataflow-server.jar"]
    ```

1. Build the container images and push them to you registry

    Set the `REGISTRY` variable to the registry prefix you want to use.

    ```bash
    REGISTRY=registry.example.com
    docker build -t springdeveloper/spring-cloud-skipper-server:2.4.1.RELEASE-jdbc -f Dockerfile-skipper-server .
    docker push springdeveloper/spring-cloud-skipper-server:2.4.1.RELEASE-jdbc
    docker build -t springdeveloper/spring-cloud-dataflow-server:2.5.1.RELEASE-jdbc -f Dockerfile-dataflow-server .
    docker push springdeveloper/spring-cloud-dataflow-server:2.5.1.RELEASE-jdbc
    ```

1. Update your app kustomization manifests with the new image locations

    For skipper app modify `newName` and `newTag` values in _apps/skipper/kustomize/overlays/production/kustomization.yaml_

    ```bash
    images:
    - name: springcloud/spring-cloud-skipper-server  # used for Kustomize matching
      newName: registry.example.com/spring-cloud-skipper-server
      newTag: 2.4.1.RELEASE-jdbc
    configMapGenerator:
    - name: skipper
      files:
        - bootstrap.yaml
        - application.yaml
    bases:
      - ../../base
    patches:
    - deployment-patch.yaml
    - service-patch.yaml
    ```

    For data-flow app modify `newName` and `newTag` values in _apps/data-flow/kustomize/overlays/production/kustomization.yaml_

    ```bash
    images:
    - name: springcloud/spring-cloud-dataflow-server  # used for Kustomize matching
      newName: registry.example.com/spring-cloud-dataflow-server
      newTag: 2.5.1.RELEASE-jdbc
      configMapGenerator:
      - name: scdf-server
        files:
          - bootstrap.yaml
          - application.yaml
      bases:
        - ../../base
      patches:
      - deployment-patch.yaml
      - service-patch.yaml
    ```

If you add your own JDBC driver then you should initialize the schema for the database and turn off the database initialization of the skipper and data-flow apps as documented in the previous section.


### <a id='ingress-resource-configuration'></a> Ingress Resource

You can modify the `ingress-patch.yaml` in the `apps/ingress/kustomize/overlays/dev/` or the `apps/ingress/kustomize/overlays/production/` directory.
Modify the host field to provide the DNS name required for your Ingress Controller configuration.

If your DNS name is `data-flow.example.com` then add that DNS name as the host for the entry under `spec.rules`:

```yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: scdf-ingress
spec:
  rules:
  - host: data-flow.example.com
    http:
      paths:
      - backend:
          serviceName: scdf-server
          servicePort: 80
        path: /
```

### <a id='loadbalancer-configuration'></a> Load Balancer

If your Kubernetes cluster supports Kubernetes Services of type LoadBalancer, you may use that type of service to provision a load balancer using an Ingress Controller such as NGINX or Contour.

<p class="note">
  This option is recommended when deploying Spring Cloud Data Flow for Kubernetes to VMware Enterprise PKS on AWS, Azure, or GCP, or on vSphere with NSX-T container networking.
</p>
<p class="note warning">
  This option is <strong>not compatible</strong> with VMware Enterprise PKS to vSphere with Flannel container networking.
</p>


## <a id='next-installing-scdf'></a> Next: Installing SCDF for Kubernetes

Proceed to the [Installing SCDF for Kubernetes](installing-scdf-for-kubernetes.html) topic for installation instructions.