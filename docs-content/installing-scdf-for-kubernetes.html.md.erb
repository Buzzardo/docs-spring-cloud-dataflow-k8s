---
title: Installing Spring Cloud Data Flow for Kubernetes
owner: Spring Cloud Data Flow Release Engineering
---

This topic describes how to install Spring Cloud Data Flow for Kubernetes.

Before proceeding, review the [Configuring Installation Values](configuring-installation-values.html) topic to ensure that you have configured all of the required or recommended installation resources.

## <a id='install-scdf-create-imagpe-pull-secret'></a> Creating image pull secret for Spring Cloud Data Flow for Kubernetes

Before installing Spring Cloud Data Flow for Kubernetes you must create a Kubernetes Secret that allows the Spring Cloud Data Flow for Kubernetes service accounts to pull images from the Tanzu Network Registry or from the registry where you optionally have relocated the images.
In the namespace where you intend to install, create a Secret as shown below.

First set the username and password variables based on your Tanzu Network login credentials or to the credentials for the registry where you optionally have relocated the images.

```bash
registry=registry.pivotal.io
username=<your user name>
password=<your password>
```

Then create the secret using the values set above.

```bash
kubectl create secret \
docker-registry scdf-image-regcred \
--docker-server=${registry} \
--docker-username=${username} \
--docker-password=${password}
```

## <a id='install-scdf-for-k8s-dev'></a> Installing Spring Cloud Data Flow for Kubernetes to the dev environment

The install script is located in `bin/install-dev.sh` automates the following steps of installing into an existing Kubernetes cluster.

* PostgreSQL
* RabbitMQ
* Skipper Server
* Data Flow server

To uninstall, execute the script `bin/uninstall-dev.sh`

## <a id='install-scdf-for-k8s-prod'></a> Installing Spring Cloud Data Flow for Kubernetes to the production environment

Before running the following command ensure that the database Skipper and Data Flow will be using has been provisioned and properly configured in each `application.yaml` configuration file.

```bash
$ kubectl kustomize ./apps/skipper/kustomize/overlays/prod/ | kapp deploy -y -a skipper -f -
```

and

```bash
$ kubectl kustomize ./apps/data-flow/kustomize/overlays/prod/ | kapp deploy -y -a data-flow -f -
```

Alternatively, instead of piping the output of `kubectl kustomize` to kapp you can pipe it to a file and then manage that file in a manner that fits into existing company deployment procedures for Kubernetes applications.

## <a id='next-connecting-scdf'></a> Next: Connecting to SCDF for Kubernetes

Proceed to the [Connecting to SCDF for Kubernetes](connecting-scdf-for-kubernetes.html) topic for connection instructions.